name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [x86, arm]
        exclude:
          - os: windows-latest
            arch: arm     
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'

    - name: Build
      run: go build -v ./...

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Run unit tests
        run: |
          go test -v ./... -coverprofile=coverage.out
          go tool cover -func=coverage.out

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.out

  docker-build:
    needs: [build, test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    outputs:
      image_tag: ${{ steps.docker_meta.outputs.tags }}
    
    steps:
    - uses: actions/checkout@v3
      
    - name: Docker meta
      id: docker_meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ secrets.DOCKERHUB_USERNAME }}/go-hello-api
        tags: |
          type=sha,format=long
          type=ref,event=branch
          latest
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.docker_meta.outputs.tags }}

  deploy-to-server:
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Deploy to Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        script: |
          # Остановка и удаление старого контейнера
          docker stop go-hello-api || true
          docker rm go-hello-api || true
          
          # Удаление старого образа
          docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/go-hello-api:latest || true
          
          # Загрузка нового образа
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/go-hello-api:latest
          
          # Запуск нового контейнера
          docker run -d \
            --name go-hello-api \
            --restart unless-stopped \
            -p 8800:8800 \
            ${{ secrets.DOCKERHUB_USERNAME }}/go-hello-api:latest
          
          # Очистка неиспользуемых образов
          docker system prune -f
